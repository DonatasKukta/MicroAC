module Generate

open MicroAC.Persistence.Entities

open System

let dataSeed = "SeedTestData"
let data str (i:int) =  $"{str}{i}_{dataSeed}"
let generate count map = Seq.map map { 1 .. 1 .. count }
let infinite seq = Seq.initInfinite (fun _ -> seq) |> Seq.concat

let users (count: int) (organisations:seq<Organisation>) = 
    let oc = Seq.length organisations
    let getO i = (Seq.item (i % oc) organisations).Name
    generate count (fun i -> new User(
                                Id = Guid.NewGuid(),
                                Name = data "Name" i,
                                Surname = data "Surname" i,
                                Email = $"testemail{i}@{dataSeed}.com",
                                Phone = $"+370 6500{i}{i}",
                                Organisation = getO i,
                                Blocked = false
                                )) 
    |> Seq.cache

let usersRoles (users:seq<User>) (roles:seq<Role>) = 
    infinite roles
    |> Seq.zip users
    |> Seq.map(fun (u, r) -> new UsersRole ( User = u.Id, Role = r.Name))

let rolesPermissions (roles:seq<Role>) (permissions:seq<Permission>) =
    infinite roles
    |> Seq.zip permissions
    |> Seq.map(fun (p, r) -> new RolesPermission(Role = r.Name, Permission = p.Id))

let permissions count (services: seq<Service>) = 
    let sc = Seq.length services
    let getS i = Seq.item (i % sc) services
    printfn "Generating permissions"
    generate count (fun i -> new Permission(
                                Id = Guid.NewGuid(),
                                Action = data "Action" i,
                                Value = data "PermissionValue" i,
                                ServiceName = (getS i).Name,
                                Description = "This record is generated by F# seeding script."
                                )) 
    |> Seq.cache

let roles c =         generate c (fun i -> new Role         (Name = data "Role" i))  
let services c =      generate c (fun i -> new Service      (Name = data "Service" i))
let organisations c = generate c (fun i -> new Organisation (Name = data "Organisation" i))

