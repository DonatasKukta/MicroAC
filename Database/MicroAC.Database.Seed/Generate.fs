module Generate

open System
open System.Text

open MicroAC.Persistence
open MicroAC.Persistence.Entities

let dataSeed = "SeedTestData"
let private data str (i:int) =  $"{str}{i}_{dataSeed}"
let private generate count map = Seq.map map { 1 .. 1 .. count }
let private infinite seq = Seq.initInfinite (fun _ -> seq) |> Seq.concat
     
let private bytes (s:string) = Encoding.UTF8.GetBytes(s)
let private passwordHandler = new PasswordHandler(Config.pepperStr)
let private hash passw salt = passwordHandler.HashPassword(bytes passw, salt)

let passwords() =
    let random = new Random(1)
    let salt : byte array =  Array.zeroCreate 16
    let ByteToHex bytes =  bytes 
                            |> Array.map (fun (x : byte) -> System.String.Format("{0:X2}", x))
                            |> String.concat System.String.Empty
    
    let printPasswords i =
        random.NextBytes(salt)
        let passwordHash = ByteToHex (hash "password123" salt)
        let passwordSalt = ByteToHex salt
        printfn "%i hash:%s  salt:%s" i passwordHash passwordSalt

    {1..1..5} |> Seq.iter printPasswords

let users (organisations:seq<Organisation>) = 
    let random = new Random(1)
    let createUser (i, o :Organisation) = 
        let email = $"testemail{i}@{dataSeed}.com"
        let salt : byte array =  Array.zeroCreate 16
        random.NextBytes(salt)
        User(
            Id = Guid.NewGuid(),
            Name = data "Name" i,
            Surname = data "Surname" i,
            Email = email,
            Phone = $"+370 6500{i}{i}",
            Organisation = o.Name,
            Blocked = false,
            Salt = salt,
            PasswordHash = hash email salt
            )        
    infinite organisations
    |> Seq.zip {1..1..Config.usersCount}
    |> Seq.map createUser
    |> Seq.cache

let usersRoles (users:seq<User>) (roles:seq<Role>) = 
    infinite roles
    |> Seq.zip users
    |> Seq.map(fun (u, r) -> UsersRole ( User = u.Id, Role = r.Name))

let rolesPermissions (roles:seq<Role>) (permissions:seq<Permission>) =
    infinite roles
    |> Seq.zip permissions
    |> Seq.map(fun (p, r) -> RolesPermission (Role = r.Name, Permission = p.Id))

let permissions (services: seq<Service>) = 
    let createPermission (i, service : Service) = 
        Permission(
            Id = Guid.NewGuid(),
            Action = data "Action" i,
            Value = data "PermissionValue" i,
            ServiceName = service.Name,
            Description = "This record is generated by F# seeding script.")
    infinite services
    |> Seq.zip {1..1..Config.permissionsCount}
    |> Seq.map createPermission
    |> Seq.cache

let roles = generate Config.rolesCount (fun i -> Role (Name = data "Role" i))  
let services = generate Config.servicesCount   (fun i -> Service (Name = data "Service" i))
let organisations = generate Config.organisationsCount (fun i -> Organisation (Name = data "Organisation" i))
