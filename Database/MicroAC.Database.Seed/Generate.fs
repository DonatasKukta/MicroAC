module Generate

open MicroAC.Persistence.Entities

open System

let dataSeed = "SeedTestData"
let data str (i:int) =  $"{str}{i}_{dataSeed}"
let generate count map = Seq.map map { 1 .. 1 .. count }
let infinite seq = Seq.initInfinite (fun _ -> seq) |> Seq.concat

let users (organisations:seq<Organisation>) = 
    let createUser (i, o :Organisation) = 
        User(
            Id = Guid.NewGuid(),
            Name = data "Name" i,
            Surname = data "Surname" i,
            Email = $"testemail{i}@{dataSeed}.com",
            Phone = $"+370 6500{i}{i}",
            Organisation = o.Name,
            Blocked = false
            )        
    infinite organisations
    |> Seq.zip {1..1..Config.usersCount}
    |> Seq.map createUser
    |> Seq.cache

let usersRoles (users:seq<User>) (roles:seq<Role>) = 
    infinite roles
    |> Seq.zip users
    |> Seq.map(fun (u, r) -> UsersRole ( User = u.Id, Role = r.Name))

let rolesPermissions (roles:seq<Role>) (permissions:seq<Permission>) =
    infinite roles
    |> Seq.zip permissions
    |> Seq.map(fun (p, r) -> RolesPermission (Role = r.Name, Permission = p.Id))

let permissions (services: seq<Service>) = 
    let createPermission (i, service : Service) = 
        Permission(
            Id = Guid.NewGuid(),
            Action = data "Action" i,
            Value = data "PermissionValue" i,
            ServiceName = service.Name,
            Description = "This record is generated by F# seeding script.")
    infinite services
    |> Seq.zip {1..1..Config.permissionsCount}
    |> Seq.map createPermission
    |> Seq.cache

let roles = generate Config.rolesCount (fun i -> Role (Name = data "Role" i))  
let services = generate Config.servicesCount   (fun i -> Service (Name = data "Service" i))
let organisations = generate Config.organisationsCount (fun i -> Organisation (Name = data "Organisation" i))
